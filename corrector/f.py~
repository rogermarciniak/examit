# USE: python e.py -i test.jpg (or test2.jpg, or test3.jpg) 

from imutils.perspective import four_point_transform
from imutils import contours
import numpy as np
import argparse
import imutils
import cv2

# creates argument (-i,--image), 
# so that command: python examit.py --image sheet.png
# opens and corrects 'sheet.png'
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True, help="path to the input image")
args = vars(ap.parse_args())

# maps question number to correct answer
ANSWER_KEY = {0:1, 1:2, 2:3, 3:4, 4:5}

# gets sheet -> 
image = cv2.imread(args["image"]) 

# converts to grayscale -> 
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# finds edges ->
edged = cv2.Canny(blurred, 75, 200)

# applies Otsu's thresholding to binarize the grayscale
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]

# finds and initialises a list of question circles
cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if imutils.is_cv2() else cnts[1]
questionCnts = []
print('cnts amount: ', len(cnts))

# for every question circle
for c in cnts:
	# create a box around a circle, 
	# x,y being top-left coord, w,h its width & height
	(x, y, w, h) = cv2.boundingRect(c)

	# use it to create the aspect ratio
	ar = w / float(h)

	# populates a list with question circles
	# to become a question circle it needs to be: 
	# wide & tall enough and have an apect ratio of +-1
	if w >= 20 and h >= 20 and ar >= 0.9 and ar <= 1.1:
		questionCnts.append(c)

# top -> bottom sort question circles
questionCnts = contours.sort_contours(questionCnts, method="top-to-bottom")[0]
print('questionCnts amount: ', len(questionCnts))

# correct q's count
correct = 0

# each q has 5(ABCDE) answers, loop over answers in groups of 5
for (q, i) in enumerate(np.arange(0, len(questionCnts), 5)):
	# sort currect question circles group from left to right
	cnts = contours.sort_contours(questionCnts[i:i + 5])[0]
	# bubbled answer index	
	bubbled = None

	# for every sorted group
	for (j, c) in enumerate(cnts):
		# create a mask (only show current circle)
		mask = np.zeros(thresh.shape, dtype="uint8")
		cv2.drawContours(mask, [c], -1, 255, -1)

		# place the mask on the sheet
		mask = cv2.bitwise_and(thresh, thresh, mask=mask)
		# count non-zero pixels in the circle mask
		total = cv2.countNonZero(mask)

		# if the current total contains a larger number of non-zero pixels
		# then it is the answer (currently)
		if bubbled is None or total > bubbled[0]:
			bubbled = (total, j)

	# colour for the correct answer contour
	color = (0, 0, 255)

	# answer key at row q
	k = ANSWER_KEY[q]

	# is the answer correct? -according to the answer key 
	if k == bubbled[1]:
		color = (0, 255, 0)
		correct += 1

	# draw the contour on the correct answer
	cv2.drawContours(image, [cnts[k]], -1, color, 3)

# calculate score (OUT OF 5 Q's)
score = (correct / 5.0) * 100

# console print score
print("[INFO] score: {:.2f}%".format(score))

# sheet print score
cv2.putText(image, "{:.2f}%".format(score), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)


cv2.imwrite('imc.png', image)
cv2.imwrite('gr.png', gray)
cv2.imwrite('bl.png', blurred)
cv2.imwrite('ed.png', edged)
cv2.imwrite('th.png', thresh)
